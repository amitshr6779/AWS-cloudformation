AWSTemplateFormatVersion: 2010-09-09
Description: Create a custom VPC with CloudFormation
 
Parameters:
 EnvironmentType:
   Description: "Specify the Environment type of the stack."
   Type: String
   Default: dev
   AllowedValues:
     - dev
     - qa
     - prod
 AmiID:
   Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
   Description: "The ID of the AMI."
   Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
 KeyPairName:
   Type: String
   Description: The name of an existing Amazon EC2 key pair in this region to use to SSH into the Amazon EC2 instances.
 
Mappings:
 EnvironmentToInstanceType:
   dev:
     InstanceType: t2.nano
   qa:
     InstanceType: t2.micro
   prod:
     InstanceType: t2.small
 
Resources:
 # Creating VPC:
 VPC:
   Type: AWS::EC2::VPC
   Properties:
     CidrBlock: 10.1.0.0/16
     EnableDnsSupport: true
     EnableDnsHostnames: true
     Tags:
     - Key: Name
       Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
 
 PublicSubnetA:
   Type: AWS::EC2::Subnet
   Properties:
     VpcId: !Ref VPC
     CidrBlock: 10.1.10.0/24
     MapPublicIpOnLaunch: true
     AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list      
     Tags:
     - Key: Name
       Value: !Sub ${AWS::StackName}-Public-A
 PublicSubnetB:
   Type: AWS::EC2::Subnet
   Properties:
     VpcId: !Ref VPC
     CidrBlock: 10.1.20.0/24
     AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list
     MapPublicIpOnLaunch: true
     Tags:
     - Key: Name
       Value: !Sub ${AWS::StackName}-Public-B
 PrivateSubnetA:
   Type: AWS::EC2::Subnet
   Properties:
     VpcId: !Ref VPC
     CidrBlock: 10.1.50.0/24
     AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list
     Tags:
     - Key: Name
       Value: !Sub ${AWS::StackName}-Private-A
 PrivateSubnetB:
   Type: AWS::EC2::Subnet
   Properties:
     VpcId: !Ref VPC
     CidrBlock: 10.1.60.0/24
     AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list
     Tags:
     - Key: Name
       Value: !Sub ${AWS::StackName}-Private-B
 
 # Our VPC will need internet access:    
 InternetGateway:
   Type: AWS::EC2::InternetGateway
   DependsOn: VPC
 AttachGateway:
   Type: AWS::EC2::VPCGatewayAttachment
   # Notice how you can't attach an IGW to a VPC unless both are created:
   Properties:
     VpcId: !Ref VPC
     InternetGatewayId: !Ref InternetGateway
 
  # Some route tables for our subnets:
 PublicRouteTable:
   Type: AWS::EC2::RouteTable
   Properties:
     VpcId: !Ref VPC
     Tags:
     - Key: Name
       Value: Public
 PublicRoute1:   # Public route table has direct routing to IGW:
   Type: AWS::EC2::Route
   DependsOn: AttachGateway
   Properties:
     RouteTableId: !Ref PublicRouteTable
     DestinationCidrBlock: 0.0.0.0/0
     GatewayId: !Ref InternetGateway 
   # Here is a private route table:
 PrivateRouteTable:
   Type: AWS::EC2::RouteTable
   Properties:
     VpcId: !Ref VPC
     Tags:
     - Key: Name
       Value: Private
 PrivateRoute1:            # Private route table can access web via NAT (created below)
   Type: AWS::EC2::Route
   Properties:
     RouteTableId: !Ref PrivateRouteTable
     DestinationCidrBlock: 0.0.0.0/0
     # Route traffic through the NAT Gateway:
     NatGatewayId: !Ref NATGateway
 
   # A NAT Gateway:
 NATGateway:
   Type: AWS::EC2::NatGateway
   Properties:
     AllocationId: !GetAtt ElasticIPAddress.AllocationId
     SubnetId: !Ref PublicSubnetA
     Tags:
     - Key: Name
       Value: !Sub NAT-${AWS::StackName}
 
 ElasticIPAddress:
   Type: AWS::EC2::EIP
   Properties:
     Domain: VPC
 
 # Attach the public subnets to public route tables,
 # and attach the private subnets to private route tables:  
 PublicSubnetARouteTableAssociation:
   Type: AWS::EC2::SubnetRouteTableAssociation
   Properties:
     SubnetId: !Ref PublicSubnetA
     RouteTableId: !Ref PublicRouteTable
 PublicSubnetBRouteTableAssociation:
   Type: AWS::EC2::SubnetRouteTableAssociation
   Properties:
     SubnetId: !Ref PublicSubnetB
     RouteTableId: !Ref PublicRouteTable
 PrivateSubnetARouteTableAssociation:
   Type: AWS::EC2::SubnetRouteTableAssociation
   Properties:
     SubnetId: !Ref PrivateSubnetA
     RouteTableId: !Ref PrivateRouteTable
 PrivateSubnetBRouteTableAssociation:
   Type: AWS::EC2::SubnetRouteTableAssociation
   Properties:
     SubnetId: !Ref PrivateSubnetB
     RouteTableId: !Ref PrivateRouteTable
 
 #EC2 instance
 PrivateInstance:
   Type: AWS::EC2::Instance
   Properties:
     AvailabilityZone: !Select [ 0, !GetAZs ]
     ImageId: !Ref AmiID
     InstanceType:
       !FindInMap [
         EnvironmentToInstanceType,
         !Ref EnvironmentType,
         InstanceType,
       ]
     SubnetId: !Ref PrivateSubnetA
     KeyName: !Ref KeyPairName
     SecurityGroupIds:
       - !Ref WebAppSecurityGroup
  PublicInstance:
   Type: AWS::EC2::Instance
   Properties:
     AvailabilityZone: !Select [ 0, !GetAZs ]
     ImageId: !Ref AmiID
     InstanceType:
       !FindInMap [
         EnvironmentToInstanceType,
         !Ref EnvironmentType,
         InstanceType,
       ]
     SubnetId: !Ref PublicSubnetA
     KeyName: !Ref KeyPairName
     SecurityGroupIds:
       - !Ref WebAppSecurityGroup
 
 WebAppSecurityGroup:
   Type: AWS::EC2::SecurityGroup
   Properties:
     VpcId: !Ref VPC
     GroupName: !Join ["-", [webapp-security-group, !Ref EnvironmentType]]
     GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
     SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: 80  
         ToPort: 80
         CidrIp: 0.0.0.0/0
       - IpProtocol: tcp
         FromPort: 443
         ToPort: 443
         CidrIp: 0.0.0.0/0
       - IpProtocol: tcp
         FromPort: 22
         ToPort: 22
         CidrIp: 0.0.0.0/0         
